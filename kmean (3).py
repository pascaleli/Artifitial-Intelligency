# -*- coding: utf-8 -*-
"""Kmean.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R-jHNcEN7vSWYb8O_JV7fY5xqnA36OXX
"""



from google.colab import drive 
drive.mount('/content/drive')

pip install mlxtend --upgrade

"""# New Section"""

import keras
import mlxtend

print(mlxtend.__version__)

# I AM PULLING data_Seminar-Supervised-Classification-K-NN-Performance-Metrics.txt into my AssignAI variable
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import numpy as np

AssignAI = '/content/drive/My Drive/AssignAI/'
DATA = np.loadtxt(AssignAI+'data_Seminar-Supervised-Classification-K-NN-Performance-Metrics.txt')
X = DATA[:, 0:2]
y = DATA[:, 2]
plt.figure()
plt.scatter(X[:, 0], X[:, 1], c=y, marker='*')
plt.show()

"""Finding K bY Plotting the elbow"""

# WE THEN SPLIT THE DATA INTO TRAIING(80%) AND TESTING(20%)
from sklearn.model_selection import train_test_split
trainX, testX, trainy, testy = train_test_split(X, y, test_size=0.2, random_state=2)

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=7)
model.fit(trainX, trainy)


# Let's compute TP, FP, FN AND TN from the confusion_matrix 

from sklearn.metrics import confusion_matrix 
from sklearn.metrics import plot_confusion_matrix
cnf_matrix = confusion_matrix(testy, model.predict(testX))
TP = cnf_matrix[0][0]
FP = cnf_matrix[0][1]
FN = cnf_matrix[1][0]
TN = cnf_matrix[1][1]

print(TP)
print(FP)
print(FN)
print(TN)
# Let's plot the confusion matrix and check the values

#class_names=['Negative', 'Positive']
#plt.figure()
#plot_confusion_matrix(cnf_matrix , classes=class_names, title='confusion metrix')

"""The optimun k from the graph is 5
Now we will do the K-Means Clustering
"""

#Plotting the receiver operating characteristic (ROC)
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from matplotlib import pyplot
#predicting probabilities
ns_probs = [0 for _ in range(len(testy))]
probs=model.predict_proba(testX)
probs=probs[:, 1]
#calculate roc curve
fpr, tpr, thresholds = roc_curve(testy, probs)
#calculate AUC
auc = roc_auc_score(testy, probs)
print('\nAUC: %.3f' % auc)
#calculate roc curves
nsfpr, nstpr, thresholds = roc_curve(testy, ns_probs)
#plot the roc curve for the model
pyplot.plot(nsfpr, nstpr, linestyle='--', label='Roc Curve')
pyplot.plot(fpr, tpr, marker='.', label='Random Prediction')
#axis labels
pyplot.xlabel('False Positive Rate')
pyplot.ylabel('True Positive Rate')
pyplot.title('Receiver Operating Characteristic')
#show the legend 
pyplot.legend()
#show the plot
pyplot.show()